generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  password      String?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  designs       Design[]
  comments      Comment[]
  likes         Like[]
  orders        Order[]
  rewardPoints  Int      @default(0)

  @@map("users")
}

model Design {
  id            String   @id @default(cuid())
  title         String
  description   String?
  fabricData    Json     // Fabric.js canvas data
  thumbnailUrl  String?
  price         Float    @default(0)
  isPublic      Boolean  @default(true)
  category      String   @default("other")
  tags          String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  comments      Comment[]
  likes         Like[]
  orders        Order[]
  materials     DesignMaterial[]

  @@map("designs")
}

model Material {
  id            String   @id @default(cuid())
  name          String
  type          String   // fabric, accessory, etc.
  price         Float
  color         String
  origin        String
  weight        String?
  category      String
  description   String?
  imageUrl      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  designs       DesignMaterial[]

  @@map("materials")
}

model DesignMaterial {
  id         String   @id @default(cuid())
  quantity   Int      @default(1)

  // Relations
  design     Design   @relation(fields: [designId], references: [id], onDelete: Cascade)
  designId   String
  material   Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
  materialId String

  @@unique([designId, materialId])
  @@map("design_materials")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  design    Design   @relation(fields: [designId], references: [id], onDelete: Cascade)
  designId  String

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  design    Design   @relation(fields: [designId], references: [id], onDelete: Cascade)
  designId  String

  @@unique([userId, designId])
  @@map("likes")
}

model Order {
  id          String      @id @default(cuid())
  total       Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  design      Design      @relation(fields: [designId], references: [id], onDelete: Cascade)
  designId    String

  @@map("orders")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}